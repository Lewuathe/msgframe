sudo: false
cache:
  directories:
  - "$HOME/.ivy2/cache"
  - "$HOME/.sbt"
  - "$HOME/.coursier"
  - "$HOME/nvm"
before_cache:
- find $HOME/.ivy2/cache -name "ivydata-*.properties" -print -delete
- find $HOME/.sbt        -name "*.lock"               -print -delete
- rm -rf $HOME/.sbt/ghpages
language: scala
matrix:
  include:
  - env: PROJECT=code-format
    jdk: openjdk8
    script: "./scalafmt --test"
  - env: PROJECT=docs
    jdk: openjdk8
    if: (branch = master OR tag IS present) AND type != pull_request
    before_install:
    - export PATH=${PATH}:./vendor/bundle
    - if [ "$TRAVIS_BRANCH" == "master" -a "$TRAVIS_PULL_REQUEST" == "false" ]; then
      openssl aes-256-cbc -K $encrypted_28e6d45c0467_key -iv $encrypted_28e6d45c0467_iv -in travis/deploy-msgframe-travis.enc -out travis/deploy-msgframe-travis -d;
      chmod 600 travis/deploy-msgframe-travis; cp travis/deploy-msgframe-travis $HOME/.ssh/id_rsa;
      fi
    install:
    - rvm use 2.4.5 --install --fuzzy
    - gem update --system
    - gem install sass
    - gem install jekyll -v 3.2.1
    script:
    - if [ "$TRAVIS_BRANCH" == "master" -a "$TRAVIS_PULL_REQUEST" == "false" ]; then
      cd $TRAVIS_BUILD_DIR && ./sbt docs/publishMicrosite; fi
  - env: PROJECT=publish
    jdk: openjdk8
    if: (branch = master OR tag IS present) AND type != pull_request
    script:
    - cd $TRAVIS_BUILD_DIR && ./scripts/publish.sh
  - env: SCALA_VERSION=2.12.8 PROJECT=projectJVM
    jdk: openjdk8
    script:
    - ./sbt ++$SCALA_VERSION "; coverage; ${PROJECT}/test; coverageReport"
    - "./sbt coverageAggregate && bash <(curl -s https://codecov.io/bash)"
#  - env: SCALA_VERSION=2.13.0-M5 PROJECT=projectJVM
#    jdk: openjdk8
#    script: ./sbt ++$SCALA_VERSION "${PROJECT}/testOnly *"
  - env: SCALA_VERSION=2.12.8 PROJECT=projectJVM
    jdk: openjdk11
    before_script: psql -c 'create database travis_ci_test;' -U postgres
    script: "./sbt ++$SCALA_VERSION ${PROJECT}/test"
env:
  global:
  - secure: Ua45vrm1Uwsa68gXscyblSv4kgOuZTwWvcIplhvPNm8C2xh/td7ynOF7x67FlrwvgUI4NTkpt9PQfACMCi4KzGCVKGlmFffgnPqNn57Evt+oro4VqOeie+i3s8MZMOy6oydc7XQo0JJtQmZq47nFMeX9nOPvfvZmVDDUsPrlSzeFoyjSpW3OxKsOIxEYWdgttgmn+uTZcz38KOGNNM5TXm/QECvp0g8Xc3CWMH9RDhGwvhnq9riS0i61O78v2l4L7obZUlna86ul53eAcbM35n0+SQzcEBQ05WdLiU+EGUBgcAuV+unpegdgsXIlnn1f72m1Q+NGxhKeMCZfrpIlSjnrvoAbnh6qKpiPe1vwIpKCK2hqeGT6JxlIODcKPkEjVdxuJYojGoBTg+K9SXATee+UGvdCTVI3JHWSG+QkvGAOHG/9NtkiNYUVEPkWgq+Ar5DEyMgFdffVFWTMjQHp/GYAtMkkMUVw09vZt76vZKJgzlF8jmfYtZo+PK9K+tO8zaSSyrOC7o+ifIT5iScFEJ1ruJNXgry7Z95hOS3lOTOQHuXGIoeEZqQ1cUkLD7CqZdeIiMHmIOkN3r2qSHz347CPapFuSugAr+dnMoIh9kK1Np1iUjknB1dnhN0wrEg+NH+UJUh70ohDLxPoWYRtMbZPgwXobdvRFYSLMbrZ2A8=
  - secure: Woqz4f1RJT9d/EKyEEUMQN1fchOi1zrQ1MqWGUHa3GYsqQVvqC/lfoUunDpUXHpWq8DXSv0mmm1q6ZMp0JWqB5UT/q3lB9TkXuCqqQUiQRmo3pX/QzSL9Eq185TIFmiSTzUrws32cTDFmwQe+CsVJk6oHpZrdQRKWVI8mTstEQXveETv/20W8eILQbt72QsFKpg8kycV2gKkdJ8kC0o1zKUVVkTIGi6BT4zec6mFqHVS9NOEIsKs8480zQ98kZRcCbzSMyK0yJ3lNRl5hSOxu6+LjLEoh2D4/URd+9GgM0vAmuG80Q0C4MebnkPIMDo0zR2NFh8cQXH/9jr+kUlMG5cHFA9XQW5d1ykYiiTM/3C7GkN2ogwD287EDx218tC5vqfVzJjKp56G2CyqNZDV6fbZ1xoesTd1QEPmp/xJHROYBomppcFTlGgwQJSns2LE5HlRPBHVWosG78wCNTKamRhYAYBSzeeRKavd4Kt0SZJ6OaiWDMjnV8s4VJthzGwDOfvLRTovqvqxV+H0JBu786DBOIusmt1+fXfZmleYRcMY/fmoTyiwM/qRHaxLBuQYfpjZlngR7ASLFmpC3U6dDE4yKULD5cMRNaPvQitoctmVrWjoIbud5ts7ZAo0tUCq8NMFzIzAckkTHltYuVx5HaZVLRaPKYcVUFHdb2Upg0I=
  - secure: ZkuSs6eZTPuA1GQg24hHAup70rRIzXrdHQCBJU2bf0FjtiC1UkiWRACPLWlLlRg8DUucty7ZnjiRXpe/xt2ZOiWffx/Ws7Wp83ky1PXXnkJ5SG8fJI1q7y4gtQO31V1ivZlSiozXc9Z3T8cFY/DC9fb/lCVS5NVBqx0ruSD2Cj8lbL0DpunPfRuEdK76I1Al/zSHa65Zw6TlnDHzOdcOdxYHKgInRvshKKm30TC98xQ2+Y+DSaIewsGC550RYlFiQnTdVb0Cc/7t2VwFTl3/JnAdu2351iTaeR3ixj2dgMRVtUgnD2vyO78YCqdnUuob5Sc4X3pgavQGOzCwSBg+D7ay8Hc9elghef1oWQqM/v2pKhwOXHCkkjyTaJ8pI8cvn8aVgDdEDEX4OxvU8UsaLs0w41bRH4ufjg0N0PUh0qNwjTqOQEK9EagBK1ma8Wga74U3SXmlXAdta1Gvs+PPER6IAD12iCxzslRk4Mr057b3WAfIzGmqE3Cj3l31o8cMnqK/6cHpguckvrmYQzGZ1t/sOGcHIFTen8S+VDSOmiYIP/73mHzlGJMh9FI27oayVFWcwo0oVTBuUD7AGreQcm35LbqcEMkPG7XR9KiBkqtGiUrrUtwar2x/QlLrXjS2h+71zNhUA3xvzKPKXsUFWUP0ucjUWkfoMZRD0yYtAUk=
